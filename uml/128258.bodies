class ClientHandler
!!!128514.java!!!	ClientHandler(inout clientSocket : Socket, inout server : Server)
        this.client = clientSocket;
        this.server = server;
        this.writer = new PrintWriter(this.client.getOutputStream(), true);
        this.name = "anonyme" + (this.server.getNombreConnectes()+1); //(int)(Math.random()*1000);
!!!128642.java!!!	run() : void
        System.out.println(this.client.getInetAddress() + " connected.");
        try {
            this.reader = new BufferedReader(new InputStreamReader(this.client.getInputStream())); 
            while (true) {
                String message = reader.readLine();
                if (message.startsWith("/")) {
                    if (message.startsWith("/name")) {
                        this.setName(message.split(" ")[1]);
                    } else if (message.startsWith("/msg")) {
                        String[] args = message.split(" ");
                        String personne = args[1];
                        String msg = "";
                        for (int i = 2; i < args.length; i++) {
                            msg += args[i] + " ";
                        }
                        this.server.sendTo(personne, msg, this);
                    } else if (message.startsWith("/follow")) {
                        String[] args = message.split(" ");
                        String personne = args[1];
                        this.server.addAbonne(personne, this);
                    } else if (message.startsWith("/unfollow")) {
                        String[] args = message.split(" ");
                        String personne = args[1];
                        this.server.removeAbonne(personne, this);
                    }else if (message.startsWith("/quit")) {
                        this.server.removeClient(this);
                        this.client.close();
                        break;
                    } else if (message.startsWith("/broadcast")) {
                        String[] args = message.split(" ");
                        String msg = "";
                        for (int i = 1; i < args.length; i++) {
                            msg += args[i] + " ";
                        }
                        this.server.broadcast(msg, this);
                    } else {
                        this.help();
                    }
                } else {
                    this.server.sendToAbonnes(message, this);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
!!!128770.java!!!	help() : void
        this.sendMessage("Commandes disponibles :");
        this.sendMessage("/name <name> : change le nom du client");
        this.sendMessage("/msg <name> <message> : envoie un message privé à <name>");
        this.sendMessage("/follow <name> : suit les messages de <name>");
        this.sendMessage("/unfollow <name> : ne suit plus les messages de <name>");
        this.sendMessage("/broadcast <message> : envoie un message à tous les clients");
        this.sendMessage("/quit : quitte le serveur");
        this.sendMessage("/help : affiche les commandes");
!!!128898.java!!!	setName(in name : String) : void
        if (!this.server.nameAlreadyUsed(name)) {
            this.name = name;
        }
!!!129026.java!!!	getName() : String
        return this.name;
!!!129154.java!!!	sendMessage(in message : String) : void
        this.writer.println(message);
!!!129282.java!!!	toString() : String
        return this.name;
