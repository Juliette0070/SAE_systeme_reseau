class Server
!!!131970.java!!!	Server()
        this.serverSocket = new ServerSocket(4444);
        this.messages = new ArrayList<>();
        this.utilisateurs = new HashSet<>();
!!!132098.java!!!	run() : void
        try {
            while(true) {
                // System.out.println("Waiting for client...");
                ClientHandler clientHandler = new ClientHandler(serverSocket.accept(),this);
                Thread clientThread = new Thread(clientHandler);
                clientThread.start();
            }
        } catch(Exception e) {
            closeServer();
            e.printStackTrace();
        }
!!!132226.java!!!	getUtilisateur(in pseudo : String) : Utilisateur
        for (Utilisateur utilisateur : this.utilisateurs) {
            if (utilisateur.getPseudo().equals(pseudo)) {
                return utilisateur;
            }
        }
        return null;
!!!132354.java!!!	addUtilisateur(inout utilisateur : Utilisateur) : void
        this.utilisateurs.add(utilisateur);
!!!132482.java!!!	test(inout message : Message) : void
        System.out.println("ID:" + message.getId() + " | " + message.getDate() + " | " + message.getLikes().size() + "likes");
        System.out.println(message.getExpediteur() + "> " + message.getContenu());
!!!132610.java!!!	broadcast(inout message : Message) : void
        for (Utilisateur utilisateur : this.utilisateurs) {
            if (!utilisateur.getPseudo().equals(message.getExpediteur().getPseudo())) {
                utilisateur.addMessage(message);
            }
        } this.messages.add(message);
!!!132738.java!!!	sendTo(in nomClient : String, inout message : Message) : void
        for (Utilisateur utilisateur : this.utilisateurs) {
            if (utilisateur.getPseudo().equals(nomClient)) {
                utilisateur.addMessage(message);
            }
        } this.messages.add(message);
!!!132866.java!!!	sendToAbonnes(inout message : Message) : void
        for (Utilisateur utilisateur : message.getExpediteur().getAbonnes()) {
            utilisateur.addMessage(message);
        } this.messages.add(message);
!!!132994.java!!!	createMessage(in contenu : String, inout expediteur : Utilisateur) : Message
        int id = this.messages.size();
        Message message = new Message(id, contenu, expediteur);
        return message;
!!!133122.java!!!	addMessage(inout message : Message) : void
        this.messages.add(message);
!!!133250.java!!!	getMessages() : Message
        return this.messages;
!!!133378.java!!!	getUtilisateurs() : Utilisateur
        return this.utilisateurs;
!!!133506.java!!!	removeClient(inout clientHandler : ClientHandler) : void
        this.utilisateurs.remove(clientHandler.getUtilisateur());
!!!133634.java!!!	closeServer() : void
        System.out.println("Closing server...");
        try {
            this.serverSocket.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
!!!133762.java!!!	main(inout args : String [[]]) : void
        Server server = new Server();
        server.run();
